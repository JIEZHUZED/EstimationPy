import numpy as np
import matplotlib.pyplot as plt
from   pylab import figure

def plotBasic(time,timeSamples,startTime,stopTime,X,Y,U,Um,Z,Xhat,P,Yhat,CovY,Xsmooth,Psmooth):

	#######################################################################
	# TRUE SYSTEM
	fig1 = plt.figure()
	fig1.set_size_inches(10,5)
	ax1  = fig1.add_subplot(111)
	ax1.plot(1.0/3600.0*time,U[:,0],'b',label='$T_{CH IN}$')
	ax1.plot(1.0/3600.0*timeSamples,Um[:,0],'bo',label='$T_{CH IN}^{SAMPLED}$',alpha=0.2)
	ax1.plot(1.0/3600.0*time,U[:,1],'r',label='$T_{CD IN}$')
	ax1.plot(1.0/3600.0*timeSamples,Um[:,1],'ro',label='$T_{CD IN}^{SAMPLED}$',alpha=0.2)
	ax1.set_xlabel('Time [h]')
	ax1.set_ylabel('Temperatures [$\circ$C]')
	ax1.set_xlim([startTime/3600.0, stopTime/3600.0])
	legend = ax1.legend(loc='upper center',bbox_to_anchor=(0.5, 1.1), ncol=4, fancybox=True, shadow=True)
	legend.draggable()
	ax1.grid(True)
	plt.savefig('a.pdf',dpi=400, bbox_inches='tight', transparent=True,pad_inches=0.1)
	
	fig2 = plt.figure()
	fig2.set_size_inches(10,5)
	ax2  = fig2.add_subplot(111)
	ax2.plot(1.0/3600.0*time,U[:,2],'g',label='$T_{CH}^{SP}$')
	ax2.plot(1.0/3600.0*time,Y[:,0],'b',label='$T_{CH}$')
	ax2.plot(1.0/3600.0*timeSamples,Z[:,0],'bo',label='$T_{CH}^{SAMPLED}$',alpha=0.2)
	ax2.plot(1.0/3600.0*time,Y[:,1],'r',label='$T_{CD}$')
	ax2.plot(1.0/3600.0*timeSamples,Z[:,1],'ro',label='$T_{CD}^{SAMPLED}$',alpha=0.2)
	ax2.set_xlabel('Time [h]')
	ax2.set_ylabel('Temperatures [$\circ$C]')
	ax2.set_xlim([startTime/3600.0, stopTime/3600.0])
	legend = ax2.legend(loc='upper center',bbox_to_anchor=(0.5, 1.15), ncol=3, fancybox=True, shadow=True)
	legend.draggable()
	ax2.grid(True)
	plt.savefig('b.pdf',dpi=400, bbox_inches='tight', transparent=True,pad_inches=0.1)
	
	fig3 = plt.figure()
	fig3.set_size_inches(10,5)
	ax3  = fig3.add_subplot(111)
	ax3.plot(1.0/3600.0*time,Y[:,3]/1000.0,'g',label='$W$')
	ax3.plot(1.0/3600.0*timeSamples,Z[:,3]/1000.0,'go',label='$W^{SAMPLED}$', alpha=0.2)
	ax3.set_xlabel('Time [h]')
	ax3.set_ylabel('Power [kW]')
	ax3.set_xlim([startTime/3600.0, stopTime/3600.0])
	legend = ax3.legend(loc='upper center',bbox_to_anchor=(0.5, 1.07), ncol=2, fancybox=True, shadow=True)
	legend.draggable()
	ax3.grid(True)
	plt.savefig('c.pdf',dpi=400, bbox_inches='tight', transparent=True,pad_inches=0.1)
	
	fig4 = plt.figure()
	fig4.set_size_inches(10,5)
	ax4  = fig4.add_subplot(111)
	ax4.plot(1.0/3600.0*time,Y[:,2],'k',label='$w_{CH}$')
	ax4.plot(1.0/3600.0*timeSamples,Z[:,2],'ko',label='$w_{CH}^{SAMPLED}$', alpha=0.2)
	ax4.set_xlabel('Time [h]')
	ax4.set_ylabel('Mass flow rate [kg/s]')
	ax4.set_xlim([startTime/3600.0, stopTime/3600.0])
	legend = ax4.legend(loc='upper center',bbox_to_anchor=(0.2, 1.05), ncol=2, fancybox=True, shadow=True)
	legend.draggable()
	ax4.grid(True)
	plt.savefig('d.pdf',dpi=400, bbox_inches='tight', transparent=True,pad_inches=0.1)
	
	#######################################################################
	fig5 = plt.figure()
	fig5.set_size_inches(10,5)
	ax5  = fig5.add_subplot(111)
	ax5.plot(1.0/3600.0*time,X[:,2],'b--',label='$\eta_{PL}^{Fault}$')
	ax5.plot(1.0/3600.0*time,Y[:,4],'b',label='$\eta_{PL}$')
	ax5.plot(1.0/3600.0*timeSamples,Xhat[:,2],'r',label='$\eta_{PL}^{UKF}$')
	ax5.fill_between(1.0/3600.0*timeSamples, Xhat[:,2] - np.sqrt(P[:,2,2]), Xhat[:,2] + np.sqrt(P[:,2,2]), facecolor='red', interpolate=True, alpha=0.3)
	ax5.plot(1.0/3600.0*timeSamples,Xsmooth[:,2],'g--',label='$\eta_{PL}^{SMOOTH}$')
	ax5.fill_between(1.0/3600.0*timeSamples, Xsmooth[:,2] - np.sqrt(Psmooth[:,2,2]), Xsmooth[:,2] + np.sqrt(Psmooth[:,2,2]), facecolor='green', interpolate=True, alpha=0.3)
	ax5.set_xlabel('Time [h]')
	ax5.set_ylabel('$\eta_{PL}$ [$\cdot$]')
	ax5.set_xlim([startTime/3600.0, stopTime/3600.0])
	legend = ax5.legend(loc='upper center',bbox_to_anchor=(0.5, 1.05), ncol=4, fancybox=True, shadow=True)
	legend.draggable()
	ax5.grid(True)
	plt.savefig('e.pdf',dpi=400, bbox_inches='tight', transparent=True,pad_inches=0.1)
	
	fig6 = plt.figure()
	fig6.set_size_inches(10,5)
	ax6  = fig6.add_subplot(111)
	ax6.plot(1.0/3600.0*time,X[:,3],'b',label='$o_1$')
	ax6.plot(1.0/3600.0*timeSamples,Xhat[:,3],'b--',label='$o_1^{UKF}$')
	ax6.fill_between(1.0/3600.0*timeSamples, Xhat[:,3] - np.sqrt(P[:,3,3]), Xhat[:,3] + np.sqrt(P[:,3,3]), facecolor='blue', interpolate=True, alpha=0.3)
	ax6.plot(1.0/3600.0*timeSamples,Xsmooth[:,3],'g--',label='$o_1^{SMOOTH}$')
	ax6.fill_between(1.0/3600.0*timeSamples, Xsmooth[:,3] - np.sqrt(Psmooth[:,3,3]), Xsmooth[:,3] + np.sqrt(Psmooth[:,3,3]), facecolor='green', interpolate=True, alpha=0.3)
	ax6.set_xlabel('Time [h]')
	ax6.set_ylabel('Occluded fraction [$\cdot$]')
	ax6.set_xlim([startTime/3600.0, stopTime/3600.0])
	legend = ax6.legend(loc='upper center',bbox_to_anchor=(0.35, 1.05), ncol=4, fancybox=True, shadow=True)
	legend.draggable()
	ax6.grid(True)
	plt.savefig('f.pdf',dpi=400, bbox_inches='tight', transparent=True,pad_inches=0.1)
	
	fig7 = plt.figure()
	fig7.set_size_inches(10,5)
	ax7  = fig7.add_subplot(111)
	ax7.plot(1.0/3600.0*time,X[:,4],'r',label='$o_2$')
	ax7.plot(1.0/3600.0*timeSamples,Xhat[:,4],'r--',label='$o_2^{UKF}$')
	ax7.fill_between(1.0/3600.0*timeSamples, Xhat[:,4] - np.sqrt(P[:,4,4]), Xhat[:,4] + np.sqrt(P[:,4,4]), facecolor='red', interpolate=True, alpha=0.3)
	ax7.plot(1.0/3600.0*timeSamples,Xsmooth[:,4],'g--',label='$o_2^{SMOOTH}$')
	ax7.fill_between(1.0/3600.0*timeSamples, Xsmooth[:,4] - np.sqrt(Psmooth[:,4,4]), Xsmooth[:,4] + np.sqrt(Psmooth[:,4,4]), facecolor='green', interpolate=True, alpha=0.3)
	ax7.set_xlabel('Time [h]')
	ax7.set_ylabel('Occluded fraction [$\cdot$]')
	ax7.set_xlim([startTime/3600.0, stopTime/3600.0])
	legend = ax7.legend(loc='upper center',bbox_to_anchor=(0.6, 1.05), ncol=4, fancybox=True, shadow=True)
	legend.draggable()
	ax7.grid(True)
	plt.savefig('g.pdf',dpi=400, bbox_inches='tight', transparent=True,pad_inches=0.1)
	
	#######################################################################
	fig8 = plt.figure()
	fig8.set_size_inches(10,5)
	ax8  = fig8.add_subplot(111)
	ax8.plot(1.0/3600.0*time,X[:,0],'b',label='$T_{CH}$')
	ax8.plot(1.0/3600.0*timeSamples,Xhat[:,0],'b--',label='$T_{CH}^{UKF}$')
	ax8.fill_between(1.0/3600.0*timeSamples, Xhat[:,0] - np.sqrt(P[:,0,0]), Xhat[:,0] + np.sqrt(P[:,0,0]), facecolor='blue', interpolate=True, alpha=0.3)
	ax8.plot(1.0/3600.0*timeSamples,Xsmooth[:,0],'g--',label='$T_{CH}^{SMOOTH}$')
	ax8.fill_between(1.0/3600.0*timeSamples, Xsmooth[:,0] - np.sqrt(Psmooth[:,0,0]), Xsmooth[:,0] + np.sqrt(Psmooth[:,0,0]), facecolor='green', interpolate=True, alpha=0.3)
	
	ax8.plot(1.0/3600.0*time,X[:,1],'r',label='$T_{CD}$')
	ax8.plot(1.0/3600.0*timeSamples,Xhat[:,1],'r--',label='$T_{CD}^{UKF}$')
	ax8.fill_between(1.0/3600.0*timeSamples, Xhat[:,1] - np.sqrt(P[:,1,1]), Xhat[:,1] +np.sqrt(P[:,1,1]), facecolor='red', interpolate=True, alpha=0.3)
	ax8.plot(1.0/3600.0*timeSamples,Xsmooth[:,1],'g--',label='$T_{CD}^{SMOOTH}$')
	ax8.fill_between(1.0/3600.0*timeSamples, Xsmooth[:,1] - np.sqrt(Psmooth[:,1,1]), Xsmooth[:,1] + np.sqrt(Psmooth[:,1,1]), facecolor='green', interpolate=True, alpha=0.3)
	
	ax8.set_xlabel('Time [h]')
	ax8.set_ylabel('Temperatures [$\circ$C]')
	ax8.set_xlim([startTime/3600.0, stopTime/3600.0])
	legend = ax8.legend(loc='upper center',bbox_to_anchor=(0.5, 1.15), ncol=3, fancybox=True, shadow=True)
	legend.draggable()
	ax8.grid(True)
	plt.savefig('h.pdf',dpi=400, bbox_inches='tight', transparent=True,pad_inches=0.1)
	
	plt.show()

def plotResults(time,stopTime,X,Y,U,Um,Pch,Z,Xhat,Yhat,P,CovZ,Xsmooth,Psmooth,Xaug,Paug):

	return
